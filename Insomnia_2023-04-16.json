{"_type":"export","__export_format":4,"__export_date":"2023-04-16T08:57:08.658Z","__export_source":"insomnia.desktop.app:v2022.7.5","resources":[{"_id":"req_fef0857716394c45992190f0507d7d97","parentId":"fld_11732d60b6194325b5bf16b6abff098e","modified":1681277465584,"created":1681277465584,"url":"localhost:5001","name":"Status","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1681277465584,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_11732d60b6194325b5bf16b6abff098e","parentId":"wrk_049a9c50f36c44e492c7b0a478ec2f51","modified":1681277465588,"created":1681277465588,"name":"User Handle","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1681277465588,"_type":"request_group"},{"_id":"wrk_049a9c50f36c44e492c7b0a478ec2f51","parentId":null,"modified":1681277465592,"created":1675097893975,"name":"Main","description":"","scope":"collection","_type":"workspace"},{"_id":"req_4b2e5550adcc4d389c6cfdb6a24bb32c","parentId":"fld_11732d60b6194325b5bf16b6abff098e","modified":1681570806152,"created":1681277465582,"url":"192.168.49.2/api/account/register/","name":"Register","description":"","method":"POST","body":{"mimeType":"","text":"{\r\n\t\"username\" : \"mj\",\r\n\t\"name\" : \"Mitul Joby\",\r\n\t\"email\" : \"mj@mj.com\" , \r\n\t\"phone\" : \"1234567890\"   ,\r\n\t\"password\": \"pass\",\r\n\t\"usertype\" : \"buyer\"\r\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1681277465582,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_0e91c3837b834faa8ae07b987efb44c5","parentId":"fld_11732d60b6194325b5bf16b6abff098e","modified":1681634074629,"created":1681402210119,"url":"localhost:5001/api/account/register","name":"Register2","description":"","method":"POST","body":{"mimeType":"","text":"{\n\t\"username\" : \"testseller\",\n\t\"name\" : \"Seller\",\n\t\"email\" : \"seller@seller.com\" , \n\t\"phone\" : \"1234567899\"   ,\n\t\"password\": \"testseller\",\n\t\"usertype\" : \"seller\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1681277465581,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_eb8b38dd08b9418c9d55f7dc1e9eef75","parentId":"fld_11732d60b6194325b5bf16b6abff098e","modified":1681630077783,"created":1681277465580,"url":"localhost:5001/api/account/login","name":"Login","description":"","method":"POST","body":{"mimeType":"","text":"{\n\t\"username\" : \"test\",\n\t\"password\": \"test\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1681277465580,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_fc73014721e74933b8b89bfe85c763ae","parentId":"fld_11732d60b6194325b5bf16b6abff098e","modified":1681634072372,"created":1681402260340,"url":"localhost:5001/api/account/login","name":"Login2","description":"","method":"POST","body":{"mimeType":"","text":"{\n\t\"username\" : \"testseller\",\n\t\"password\": \"testseller\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1681277465578.875,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_b9a44acd956c48e39e5e0e340750b654","parentId":"fld_11732d60b6194325b5bf16b6abff098e","modified":1681277465577,"created":1681277465577,"url":"localhost:5001/api/account/logout","name":"Logout","description":"","method":"POST","body":{"mimeType":"","text":"{\r\n    \"username\":\"mj\",\r\n    \"password\":\"pass\"\r\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1681277465577,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_cee5386f3f5741ae9f6e78d0e4529e31","parentId":"fld_11732d60b6194325b5bf16b6abff098e","modified":1681277465575,"created":1681277465575,"url":"localhost:5001/api/account/authcheck","name":"Authcheck","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1681277465575,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_930a717a606a4412b597d77958803d15","parentId":"fld_11732d60b6194325b5bf16b6abff098e","modified":1681277465572,"created":1681277465572,"url":"localhost:5001/api/account/update","name":"Update","description":"","method":"PUT","body":{"mimeType":"","text":"{\r\n\t\"username\" : \"mj\",\r\n\t\"password\": \"pass\",\r\n\t\"address\" : \"Home\"\r\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1681277465572,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_14c9ebf0a89844e9a5e115e1a7bc37fd","parentId":"fld_11732d60b6194325b5bf16b6abff098e","modified":1681277465567,"created":1681277465567,"url":"localhost:5001/api/account/delete","name":"Delete","description":"","method":"DELETE","body":{"mimeType":"","text":"{\r\n\t\"username\" : \"mj\",\r\n\t\"password\": \"pass\"\r\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1681277465567,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_5ed156813fc8416786be2fd034234b1a","parentId":"fld_11732d60b6194325b5bf16b6abff098e","modified":1681634096058,"created":1681402274916,"url":"http://localhost:5002/api/products/create","name":"Add products","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"name\" : \"white towel\",\n\t\"price\" : 100,\n\t\"limit\" : 10,\n\t\"manufacturer\" : \"ADCB textiles\"\n}"},"parameters":[{"id":"pair_6c0f799d7830474d804feaa3778e14e5","name":"","value":"","description":""}],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{"type":"apikey","disabled":false,"key":"Token","value":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiU2VsbGVyIiwidXNlcm5hbWUiOiJ0ZXN0c2VsbGVyIiwidXNlcnR5cGUiOiJzZWxsZXIiLCJleHAiOjE2ODE1NTI0MjIsImlhdCI6MTY4MTQwMjQyMiwiaXNzIjoidXNlcnNlcnZpY2UifQ.ge-RzuSjJS8J8eMmHAFWDt-PM9qAgf4OI7tJsfqPh6M","addTo":"cookie"},"metaSortKey":-1681277465517,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_6beb9d5c4d994eb9a4733b0ad08e6151","parentId":"fld_11732d60b6194325b5bf16b6abff098e","modified":1681635276384,"created":1681634151425,"url":"localhost:5002/api/products/fetch","name":"get products info","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"ids\" : [10]\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1681277465467,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_97f4e2aaf8c6480b8c1ec940bd694d0f","parentId":"fld_11732d60b6194325b5bf16b6abff098e","modified":1681635280917,"created":1681633987811,"url":"localhost:5002/api/products/seller","name":"get seller products","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1681277465417,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_b471e40419c94bf1baa214019e5be09f","parentId":"fld_11732d60b6194325b5bf16b6abff098e","modified":1681635308351,"created":1681615058783,"url":"localhost:5003/api/orders/create","name":"Create orders","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"IDs\" : [10,11,11]\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1681277465367,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_44918f3943614a9dbc51ccef1df4f68b","parentId":"fld_11732d60b6194325b5bf16b6abff098e","modified":1681635390173,"created":1681624811122,"url":"localhost:5003/api/orders/all","name":"get all respective usersr orders","description":"","method":"GET","body":{"mimeType":"application/json","text":"{\n\t//If seller is logged in it will \n\t//Show sellers orders \n\t//So this API changes its behaviours based on logged in user \n\t// HORRIBLE DESIGN AND VERY IFFECIENT ESPECIALLY WHEN ITS A SELLER\n\t//Its cus the databases are buyer oriented\n\t//Should be easy fix, may be a good idea for a framework project in ingenius23?!?\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1681277465342,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_e3ae5095afdd44f6ad10ca2a95d4546e","parentId":"fld_11732d60b6194325b5bf16b6abff098e","modified":1681635293536,"created":1681631011472,"url":"localhost:5003/api/orders/fetch","name":"fetch a particular order","description":"","method":"GET","body":{"mimeType":"application/json","text":"{\n\t\"order_id\" : 5\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1681277465317,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"env_4dbc387fbcf6a3cb548935b986170cca1bb808c1","parentId":"wrk_049a9c50f36c44e492c7b0a478ec2f51","modified":1675097893980,"created":1675097893980,"name":"Base Environment","data":{},"dataPropertyOrder":null,"color":null,"isPrivate":false,"metaSortKey":1675097893980,"_type":"environment"},{"_id":"jar_4dbc387fbcf6a3cb548935b986170cca1bb808c1","parentId":"wrk_049a9c50f36c44e492c7b0a478ec2f51","modified":1681634612803,"created":1675097893983,"name":"Default Jar","cookies":[{"key":"token","value":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiU2VsbGVyIiwidXNlcm5hbWUiOiJ0ZXN0c2VsbGVyIiwidXNlcnR5cGUiOiJzZWxsZXIiLCJleHAiOjE2ODE2NDk2MTIsImlhdCI6MTY4MTYzNDYxMiwiaXNzIjoidXNlcnNlcnZpY2UifQ.uoVXjaEaQ9vf9N400Qn0PSk0SMCLmy_me3o1f_sztMs","maxAge":15000,"domain":"localhost","path":"/","httpOnly":true,"hostOnly":false,"creation":"2023-04-12T05:31:36.885Z","lastAccessed":"2023-04-16T08:43:32.803Z","id":"04586472985503587"}],"_type":"cookie_jar"},{"_id":"spc_feec0de317ad441cb890029f9b9d7e5b","parentId":"wrk_049a9c50f36c44e492c7b0a478ec2f51","modified":1675097893976,"created":1675097893976,"fileName":"Main","contents":"","contentType":"yaml","_type":"api_spec"},{"_id":"pf_135652e2a0ce4fd9930e194132213f42","parentId":"wrk_049a9c50f36c44e492c7b0a478ec2f51","modified":1678015703161,"created":1678015703161,"name":"comparator_grpc.pb.go","protoText":"// Code generated by protoc-gen-go-grpc. DO NOT EDIT.\n// versions:\n// - protoc-gen-go-grpc v1.2.0\n// - protoc             v3.21.12\n// source: comparator.proto\n\npackage proto\n\nimport (\n\tcontext \"context\"\n\tgrpc \"google.golang.org/grpc\"\n\tcodes \"google.golang.org/grpc/codes\"\n\tstatus \"google.golang.org/grpc/status\"\n)\n\n// This is a compile-time assertion to ensure that this generated file\n// is compatible with the grpc package it is being compiled against.\n// Requires gRPC-Go v1.32.0 or later.\nconst _ = grpc.SupportPackageIsVersion7\n\n// ComparatorClient is the client API for Comparator service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.\ntype ComparatorClient interface {\n\tCompareImages(ctx context.Context, in *ImageCompareRequest, opts ...grpc.CallOption) (*ImageCompareReply, error)\n}\n\ntype comparatorClient struct {\n\tcc grpc.ClientConnInterface\n}\n\nfunc NewComparatorClient(cc grpc.ClientConnInterface) ComparatorClient {\n\treturn &comparatorClient{cc}\n}\n\nfunc (c *comparatorClient) CompareImages(ctx context.Context, in *ImageCompareRequest, opts ...grpc.CallOption) (*ImageCompareReply, error) {\n\tout := new(ImageCompareReply)\n\terr := c.cc.Invoke(ctx, \"/comparator.Comparator/CompareImages\", in, out, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\n// ComparatorServer is the server API for Comparator service.\n// All implementations must embed UnimplementedComparatorServer\n// for forward compatibility\ntype ComparatorServer interface {\n\tCompareImages(context.Context, *ImageCompareRequest) (*ImageCompareReply, error)\n\tmustEmbedUnimplementedComparatorServer()\n}\n\n// UnimplementedComparatorServer must be embedded to have forward compatible implementations.\ntype UnimplementedComparatorServer struct {\n}\n\nfunc (UnimplementedComparatorServer) CompareImages(context.Context, *ImageCompareRequest) (*ImageCompareReply, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method CompareImages not implemented\")\n}\nfunc (UnimplementedComparatorServer) mustEmbedUnimplementedComparatorServer() {}\n\n// UnsafeComparatorServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to ComparatorServer will\n// result in compilation errors.\ntype UnsafeComparatorServer interface {\n\tmustEmbedUnimplementedComparatorServer()\n}\n\nfunc RegisterComparatorServer(s grpc.ServiceRegistrar, srv ComparatorServer) {\n\ts.RegisterService(&Comparator_ServiceDesc, srv)\n}\n\nfunc _Comparator_CompareImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(ImageCompareRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(ComparatorServer).CompareImages(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: \"/comparator.Comparator/CompareImages\",\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(ComparatorServer).CompareImages(ctx, req.(*ImageCompareRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n\n// Comparator_ServiceDesc is the grpc.ServiceDesc for Comparator service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar Comparator_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"comparator.Comparator\",\n\tHandlerType: (*ComparatorServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"CompareImages\",\n\t\t\tHandler:    _Comparator_CompareImages_Handler,\n\t\t},\n\t},\n\tStreams:  []grpc.StreamDesc{},\n\tMetadata: \"comparator.proto\",\n}\n\n// UserClient is the client API for User service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.\ntype UserClient interface {\n\tRegisterUser(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterReply, error)\n}\n\ntype userClient struct {\n\tcc grpc.ClientConnInterface\n}\n\nfunc NewUserClient(cc grpc.ClientConnInterface) UserClient {\n\treturn &userClient{cc}\n}\n\nfunc (c *userClient) RegisterUser(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterReply, error) {\n\tout := new(UserRegisterReply)\n\terr := c.cc.Invoke(ctx, \"/comparator.User/RegisterUser\", in, out, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\n// UserServer is the server API for User service.\n// All implementations must embed UnimplementedUserServer\n// for forward compatibility\ntype UserServer interface {\n\tRegisterUser(context.Context, *UserRegisterRequest) (*UserRegisterReply, error)\n\tmustEmbedUnimplementedUserServer()\n}\n\n// UnimplementedUserServer must be embedded to have forward compatible implementations.\ntype UnimplementedUserServer struct {\n}\n\nfunc (UnimplementedUserServer) RegisterUser(context.Context, *UserRegisterRequest) (*UserRegisterReply, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method RegisterUser not implemented\")\n}\nfunc (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}\n\n// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to UserServer will\n// result in compilation errors.\ntype UnsafeUserServer interface {\n\tmustEmbedUnimplementedUserServer()\n}\n\nfunc RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {\n\ts.RegisterService(&User_ServiceDesc, srv)\n}\n\nfunc _User_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(UserRegisterRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(UserServer).RegisterUser(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: \"/comparator.User/RegisterUser\",\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(UserServer).RegisterUser(ctx, req.(*UserRegisterRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n\n// User_ServiceDesc is the grpc.ServiceDesc for User service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar User_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"comparator.User\",\n\tHandlerType: (*UserServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"RegisterUser\",\n\t\t\tHandler:    _User_RegisterUser_Handler,\n\t\t},\n\t},\n\tStreams:  []grpc.StreamDesc{},\n\tMetadata: \"comparator.proto\",\n}\n","_type":"proto_file"},{"_id":"pd_263efff29642482388d1d3eaeb50c6c3","parentId":"wrk_049a9c50f36c44e492c7b0a478ec2f51","modified":1678014965347,"created":1678014965347,"name":"proto","_type":"proto_directory"},{"_id":"pd_17f16d6a77124750b79e819dc20f1e09","parentId":"wrk_049a9c50f36c44e492c7b0a478ec2f51","modified":1678015762239,"created":1678015762239,"name":"proto","_type":"proto_directory"},{"_id":"pf_25a91958f5ac4f59b86e315db7d4982a","parentId":"pd_263efff29642482388d1d3eaeb50c6c3","modified":1678014965345,"created":1678014965345,"name":"comparator.proto","protoText":"// Protobuf Definition for the Gorjus Services\nsyntax = \"proto3\";\npackage comparator;\n\noption go_package = \"github.com/anirudhRowjee/cssbatt_demux/proto\";\n\nservice Comparator {\n  rpc CompareImages(ImageCompareRequest) returns (ImageCompareReply) {}\n}\n\nmessage ImageCompareRequest {\n  string image1name = 1;\n  string image2name = 2;\n}\n\nmessage ImageCompareReply { float comparison_percentage = 1; }\n","_type":"proto_file"},{"_id":"pf_8a615d7d12494df0963a59854001f338","parentId":"pd_17f16d6a77124750b79e819dc20f1e09","modified":1678015762233,"created":1678015762233,"name":"comparator.proto","protoText":"// Protobuf Definition for the Gorjus Services\nsyntax = \"proto3\";\npackage comparator;\n\noption go_package = \"github.com/anirudhRowjee/cssbatt_demux/proto\";\n\nservice Comparator {\n  rpc CompareImages(ImageCompareRequest) returns (ImageCompareReply) {}\n}\nservice User{\n  rpc RegisterUser(UserRegisterRequest) returns (UserRegisterReply) {}\n}\n\nmessage UserRegisterRequest{\n   string username = 1;\n   string password = 2;\n}\nmessage UserRegisterReply{\n   string message = 1;\n}\n\nmessage ImageCompareRequest {\n  string image1name = 1;\n  string image2name = 2;\n}\n\nmessage ImageCompareReply { float comparison_percentage = 1; }\n","_type":"proto_file"}]}